buildscript {
	ext.kotlin_version = "1.1.1"
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
	}
}

plugins {
	id "nebula.dependency-lock" version "4.9.4"
	id "org.jetbrains.intellij" version "0.2.16"
	id "org.jetbrains.kotlin.jvm" version "1.1.1"
}
apply plugin:"java"
apply plugin:"groovy"
apply plugin:"kotlin"
apply plugin:"idea"
apply plugin:"org.jetbrains.intellij"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "lib" }
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.1"
		languageVersion = "1.1"
	}
}
ext.kotlinVersion = "1.1.4"

intellij {
	def ideVersion = System.getenv().getOrDefault("LIVEPLUGIN_IDEA_VERSION", "IU-172.3757.29")
	println("Using ide version: ${ideVersion}")
	version ideVersion
	// The artifact name is deliberately not "live-plugin" because plugins are stored in the "live-plugins" directory.
	// The "LivePlugin" directory is deleted on each plugin update so it's good make it distinct from "live-plugins".
	pluginName = "LivePlugin"
	downloadSources = true
	sameSinceUntilBuild = false
	updateSinceUntilBuild = false
	plugins = ["Groovy", "Kotlin", "git4idea", "github", "junit"]
}
dependencyLock {
	lockFile = "dependencyLock.json"
	configurationNames = ["runtime"]
	includeTransitives = true
}

dependencies {
	// Bundle kotlin compiler and stdlib with LivePlugin because IDEs are not bundled with kotlin-compiler
	// and IDE kotlin jars are more likely to be updated than IDE groovy.jar,
	// so it seems more reliable to bundle the right version of kotlin jars.
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-embeddable', version: kotlinVersion
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

	compile group: 'org.clojure', name: 'clojure', version: '1.8.0'
	compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.12.3'
	compile group: 'org.scala-lang', name: 'scala-library', version: '2.12.3'
	compile group: 'org.scala-lang', name: 'scala-reflect', version: '2.12.3'

	testCompile group: 'junit', name: 'junit', version: '4.12' // includes hamcrest-core
}
"Exclude scala and clojure jars because they are optional and can be downloaded by LivePlugin at runtime"()
"Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"()
"Add source files to compiler output so that LivePlugin source code is available for navigation at runtime"()

sourceSets {
	// Keep groovy and kotlin util source code in separate source sets because otherwise
	// compilation fails because of inter-dependencies between kotlin and groovy files which confuses compiler,
	// even though overall dependencies are unidirectional:
	// pluginUtilKotlin -> pluginUtilGroovy -> main
	
	main {
		java { srcDir "src/main" }
		resources { srcDir "resources" }
		resources { srcDir "plugin-examples" }
	}
	pluginUtilGroovy {
		groovy { srcDir "src/plugin-util-groovy" }
		compileClasspath = main.output + configurations.compileClasspath + configurations.pluginUtilGroovyCompileClasspath
	}
	pluginUtilKotlin {
		kotlin { srcDir "src/plugin-util-kotlin" }
		compileClasspath = main.output + pluginUtilGroovy.output + configurations.compileClasspath + configurations.pluginUtilKotlinCompileClasspath
	}
	test {
		groovy { srcDir "src/test" }
		compileClasspath = main.output + pluginUtilGroovy.output + configurations.testCompileClasspath + configurations.pluginUtilGroovyCompileClasspath
		runtimeClasspath = test.output + main.output + pluginUtilGroovy.output +
			configurations.testRuntimeClasspath + configurations.pluginUtilGroovyRuntimeClasspath
	}
}

jar {
	from sourceSets.pluginUtilGroovy.output, sourceSets.pluginUtilKotlin.output
}

task installLivePlugin() { doLast {
	def version = new File("resources/META-INF/plugin.xml").readLines()
			.find { it.contains("<version>") }
			.replaceFirst(".*<version>", "")
			.replaceFirst("</version>.*", "")
	def localMavenPath = repositories.mavenLocal().url.path + "/liveplugin/live-plugin/"
	def toFile = "${localMavenPath}/${version}/live-plugin-${version}.jar"

	ant.copy(
		file: "LivePlugin.jar",
		toFile: toFile
	)

	println("Installed to local maven liveplugin version " + version)
	println("Path: ${toFile}")
} }

def "Exclude scala and clojure jars because they are optional and can be downloaded by LivePlugin at runtime"() {
	def regexes = [".*scala-.*", ".*clojure-.*"]
	def files = configurations.compile.resolvedConfiguration.files.findAll { file ->
		regexes.any { file.name.matches(it) }
	}
	prepareSandbox.setLibrariesToIgnore(files.toArray())
}

def "Add source files to compiler output so that LivePlugin source code is available for navigation at runtime"() {
	compileJava.doLast {
		def classesFolder = project.tasks.findByName(JavaPlugin.COMPILE_JAVA_TASK_NAME).destinationDir
		ant.copy(toDir: classesFolder.absolutePath, overwrite: true) {
			ant.fileset(dir: "./src/plugin-util-groovy", includes: "**/*")
			ant.fileset(dir: "./src/plugin-util-kotlin", includes: "**/*")
		}
	}
}

def "Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"() {
	// Remove kotlin version from jars zipped with plugin so that when they are updated, 'LivePlugin' module dependencies are still correct.
	def filesToMove = [
		["kotlin-compiler-embeddable-${kotlinVersion}.jar", "kotlin-compiler-embeddable.jar"],
		["kotlin-reflect-${kotlinVersion}.jar", "kotlin-reflect.jar"],
		["kotlin-stdlib-${kotlinVersion}.jar", "kotlin-stdlib.jar"]
	]
	prepareSandbox.doLast {
		filesToMove.each {
			ant.move(
				file: "build/idea-sandbox/plugins/LivePlugin/lib/${it[0]}",
				tofile: "build/idea-sandbox/plugins/LivePlugin/lib/kotlin-compiler/${it[1]}"
			)
		}
	}
}
